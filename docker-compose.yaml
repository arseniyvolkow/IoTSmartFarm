version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"  # Dashboard access
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    restart: unless-stopped
    networks:
      - app-network

  user_service:
    build:
      context: ./user_service
      dockerfile: Dockerfile.user_service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user.rule=PathPrefix(`/api/user-service`)"
      - "traefik.http.services.user.loadbalancer.server.port=8005"
    depends_on:
      postgresql_user_service:
        condition: service_healthy
    env_file: ".env"
    restart: unless-stopped
    networks:
      - app-network

  device_service:
    build:
      context: ./device_service
      dockerfile: Dockerfile.device_service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.device.rule=PathPrefix(`/api/device-service`)"
      - "traefik.http.services.device.loadbalancer.server.port=8000"
    depends_on:
      user_service:
        condition: service_started
      postgresql_device_service:
        condition: service_healthy
    env_file: ".env"
    restart: unless-stopped
    networks:
      - app-network

  sensor_data_service:
    build: 
      context: ./sensor_data_service
      dockerfile: Dockerfile.sensor_data_service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sensor.rule=PathPrefix(`/api/sensor-data`)"
      - "traefik.http.services.sensor.loadbalancer.server.port=8006"
    depends_on:
      mosquitto:
        condition: service_started
      influxdb:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: ".env"
    restart: unless-stopped
    networks:
      - app-network

  rule_service:
    build:
      context: ./rule_service
      dockerfile: Dockerfile.rule_service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rule.rule=PathPrefix(`/api/rule-service`)"
      - "traefik.http.services.rule.loadbalancer.server.port=8000"
    depends_on:
      user_service:
        condition: service_started
      postgresql_rule_service:
        condition: service_healthy
    env_file: ".env"
    restart: unless-stopped
    networks:
      - app-network

  rule_worker:
    build:
      context: ./rule_worker
      dockerfile: Dockerfile.rule_worker
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rule.rule=PathPrefix(`/api/rule-worker`)"
      - "traefik.http.services.rule.loadbalancer.server.port=8000"
    depends_on:
      user_service:
        condition: service_started
      postgresql_rule_service:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file: ".env"
    restart: unless-stopped
    networks:
      - app-network

  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: mosquitto
    ports:
      - "1883:1883"
      - "9001:9001"  # WebSocket port
    volumes:
      - "./mosquitto/config:/mosquitto/config"
      - "./mosquitto/data:/mosquitto/data"
      - "./mosquitto/log:/mosquitto/log"
      - "./mosquitto/certs:/mosquitto/certs"
    env_file: ".env"
    restart: unless-stopped
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - "redis_data:/data"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    healthcheck:
      test: |
        if [ -n "$REDIS_PASSWORD" ]; then
          redis-cli -a "$REDIS_PASSWORD" ping
        else
          redis-cli ping
        fi
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    ports:
      - "8086:8086"
    volumes:
      - "influxdb_data:/var/lib/influxdb2"
      - "influxdb_config:/etc/influxdb2"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME:-admin}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD:-password123}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG:-myorg}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET:-mybucket}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN:-mytoken123}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  postgresql_user_service:
    image: postgres:15
    container_name: postgresql_user_service
    ports:
      - "5433:5432"
    volumes:
      - "postgres_user_data:/var/lib/postgresql/data"
    environment:
      POSTGRES_USER: ${POSTGRES_USER_DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_USER_DATABASE_PASSWORD}
      POSTGRES_DB: ${POSTGRES_USER_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_DATABASE_USERNAME} -d ${POSTGRES_USER_DATABASE_NAME} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgresql_device_service:
    image: postgres:15
    container_name: postgresql_device_service
    ports:
      - "5434:5432"
    volumes:
      - "postgres_device_data:/var/lib/postgresql/data"
    environment:
      POSTGRES_USER: ${POSTGRES_DEVICE_DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_DEVICE_DATABASE_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DEVICE_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_DEVICE_DATABASE_USERNAME} -d ${POSTGRES_DEVICE_DATABASE_NAME} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgresql_rule_service:
    image: postgres:15
    container_name: postgresql_rule_service
    ports:
      - "5435:5432"
    volumes:
      - "postgres_rule_data:/var/lib/postgresql/data"
    environment:
      POSTGRES_USER: ${POSTGRES_RULE_DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_RULE_DATABASE_PASSWORD}
      POSTGRES_DB: ${POSTGRES_RULE_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_RULE_DATABASE_USERNAME} -d ${POSTGRES_RULE_DATABASE_NAME} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  app-network:
    driver: bridge

volumes:
  postgres_user_data:
    driver: local
  postgres_device_data:
    driver: local
  postgres_rule_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  redis_data:
    driver: local